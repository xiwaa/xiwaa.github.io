{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1564905495998},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1564905495612},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1564905495614},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1564905495930},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1564905495630},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1564905495627},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1564905495633},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1564905495635},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1564905495637},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1564905495639},{"_id":"themes/next/README.md","hash":"efcdc4b0ca791c3fc64afa28c8721e137f2d11ea","modified":1564905495644},{"_id":"themes/next/README.cn.md","hash":"b878b73f3fcdef47849453c94420871903d487b3","modified":1564905495641},{"_id":"themes/next/_config.yml","hash":"a24d678daae948d287ba14c8bddc3af8037c5dc9","modified":1564980096563},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1564905495646},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1564905495649},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1564905496003},{"_id":"source/CNAME","hash":"636cc40e605a7dfc46d46c27f6db1c450ecf8d28","modified":1564908677752},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1564905495621},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1564905495618},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1564905495622},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1564905495991},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1564905495624},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1564905495994},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1564905495973},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1564905495939},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1564905495942},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1564905495945},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1564905495950},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1564905495954},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1564905495976},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1564905495988},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1564905495979},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1564905495985},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1564905495957},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1564905495960},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1564905495963},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1564905495969},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1564905495659},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1564905495727},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1564905495914},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1564905495729},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1564905496011},{"_id":"themes/next/layout/page.swig","hash":"5645d2fe366b65abae3cf5804c32f44b43ef3185","modified":1564925293296},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1564905495724},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1564905495735},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1564905495737},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1564905496009},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1564905495922},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1564905495927},{"_id":"source/Programming/index.md","hash":"6e80beefa059c61e314fefa8c2a21f4491767628","modified":1564978224593},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1564905495925},{"_id":"source/_posts/HTMLCollection与NodeList.md","hash":"7eaf8ee1dded14187492c34742e096d0b0935554","modified":1565077821874},{"_id":"source/tags/index.md","hash":"315898325efd86680dfe8a879dabbe5a7cfcb1d9","modified":1564920138177},{"_id":"source/_posts/JacaScript中的this.md","hash":"24ba38102844ed9a33f219b1edee15749e858050","modified":1565010775985},{"_id":"source/categories/index.md","hash":"458be2c0a220712fafbc857b94e1f6ec87647b45","modified":1564919966530},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1564905496057},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1564905495657},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1564905495654},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1564905495673},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1564905495676},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1564905495663},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1564905495666},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1564905495669},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1564905495680},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1564905495671},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1564905495718},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1564905495682},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1564905495720},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1564905495703},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1564905495722},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1564905495701},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1564905495742},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1564905495744},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1564905495766},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1564905495858},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1564905495861},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1564905495864},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1564905495870},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1564905495873},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1564905495876},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1564905495879},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1564905496549},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1564905496062},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1564905496114},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1564905496067},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1564905496121},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1564905496072},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1564905496075},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1564905496078},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1564905496125},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1564905496081},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1564905496087},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1564905496090},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1564905496093},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1564905496128},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1564905496096},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1564905496103},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1564905496111},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1564905496108},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1564905496131},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1564905496020},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1564905496028},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1564905496025},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1564905496033},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1564905496038},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1564905496041},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1564905496044},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1564905496023},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1564905496047},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1564905495759},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1564905495754},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1564905496555},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1564905496557},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1564905496561},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1564905496574},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1564926650801},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1564905495695},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1564905495699},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1564905495686},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1564905495710},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1564905495688},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1564905495691},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1564905495715},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1564905495712},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1564905495707},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1564905495750},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1564905495757},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1564905495776},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1564905495762},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1564905495779},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1564905495790},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1564905495783},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1564905495787},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1564905495811},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1564905495792},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1564905495798},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1564905495795},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1564905495826},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1564905495813},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1564905495808},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1564905495805},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1564905495829},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1564905495774},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1564905495835},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1564905495840},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1564905495843},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1564905495855},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1564905495846},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1564905495824},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1564905495851},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1564905495911},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1564905495887},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1564905495900},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1564905495905},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1564905496475},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1564905496553},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1564905496570},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1564905496565},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1564905496572},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1564905496559},{"_id":"themes/next/source/css/_variables/base.styl","hash":"c0116b6a5740c17011120d8849594ef47096b26c","modified":1565077612714},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1564905496577},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1564905496179},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1564905496145},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1564905496156},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1564905496151},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1564905496163},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1564905496160},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1564905496170},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1564905496184},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1564905496195},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1564905496173},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1564905496176},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1564905496241},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1564905496469},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1564905496461},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1564905496303},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1564905496305},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1564905496293},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1564905496308},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1564905496245},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1564905496312},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1564905496248},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1564905496315},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1564905496318},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1564905496320},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1564905496322},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1564905496353},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1564905496376},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1564905496379},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1564905496382},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1564905496386},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1564905496388},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1564905496394},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1564905496391},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1564905496396},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1564905496399},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1564905496417},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1564905496401},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1564905496406},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1564905496404},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1564905496409},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1564905496359},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1564905496411},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1564905496413},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1564905496419},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1564905496372},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1564905496361},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1564905496368},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1564905496365},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1564905496370},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1564905496427},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1564905496425},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1564905496423},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1564905496444},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1564905496446},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1564905496456},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1564905496451},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1564905496454},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1564905496355},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1564905495892},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1564905495895},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1564905496791},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1564905496623},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1564905496626},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1564905496587},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1564905496629},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1564905496633},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1564905496590},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1564905496744},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1564905496806},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1564905496804},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1564905496808},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1564905496801},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1564905496795},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1564905496799},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1564905496482},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1564905496486},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1564905496489},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1564905496491},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1564905496494},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1564905496496},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1564905496502},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1564905496500},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1564905496544},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1564905496535},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1564905496539},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1564905496537},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1564905496546},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1564905496515},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1564905496541},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1564905496517},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1564905496529},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1564905496522},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1564905496520},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1564905496192},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1564905496227},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1564905496235},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1564905496237},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1564905496252},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1564905496298},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1564905496300},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1564905496255},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1564905496257},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1564905496272},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1564905496260},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1564905496263},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1564905496265},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1564905496268},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1564905496270},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1564905496326},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1564905496329},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1564905496331},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1564905496437},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1564905496440},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1564905496230},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1564905496338},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1564905496341},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1564905496778},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1564905496781},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1564905496776},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1564905496784},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1564905496786},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1564905496638},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1564905496646},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1564905496643},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1564905496655},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1564905496649},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1564905496669},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1564905496658},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1564905496666},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1564905496677},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1564905496661},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1564905496681},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1564905496684},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1564905496702},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1564905496705},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1564905496708},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1564905496674},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1564905496686},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1564905496710},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1564905496713},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1564905496689},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1564905496691},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1564905496694},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1564905496697},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1564905496723},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1564905496700},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1564905496718},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1564905496726},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1564905496728},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1564905496732},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1564905496742},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1564905496720},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1564905496734},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1564905496737},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1564905496750},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1564905496739},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1564905496752},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1564905496755},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1564905496757},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1564905496760},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1564905496762},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1564905496769},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1564905496766},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1564905496594},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1564905496771},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1564905496597},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1564905496601},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1564905496604},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1564905496607},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1564905496609},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1564905496612},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1564905496617},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1564905496615},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1564905496621},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1564905496506},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1564905496511},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1564905496527},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1564905496212},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1564905496216},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1564905496223},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1564905496220},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1564905496289},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1564905496225},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1564905496276},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1564905496279},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1564905496281},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1564905496284},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1564905496286},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1564905496449},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1564905496349},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1564905496343},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1564905496346},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1564905496464},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1564905496430},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1564905496336},{"_id":"public/search.xml","hash":"8f3bb4c597a077668cf0d018be6677325b810d90","modified":1565077869278},{"_id":"public/Programming/index.html","hash":"3f6238b772b8bf78bb72ca63d73bf2750fdd2ab5","modified":1565077869290},{"_id":"public/tags/index.html","hash":"96fd6b5ff09d4a36c67788532bc5820424c25d3e","modified":1565077869290},{"_id":"public/categories/index.html","hash":"25054ceafd89cb77f532eafc450afe016057ba68","modified":1565077869290},{"_id":"public/2019/08/06/HTMLCollection与NodeList/index.html","hash":"83c43a03b7be86ea06bd860d28099fd10a0bb767","modified":1565077869290},{"_id":"public/2019/08/05/JacaScript中的this/index.html","hash":"743d09e7a794a3dda5420da1e27326ae4b80fdc7","modified":1565077869290},{"_id":"public/archives/index.html","hash":"7c3b542f9f99bdde8a45dcb62e859f7be1e6773a","modified":1565077869290},{"_id":"public/archives/2019/index.html","hash":"e64c7c35e8bede3f295b502ce8ca6546c928b9e0","modified":1565077869290},{"_id":"public/archives/2019/08/index.html","hash":"76429a0da29979a296a587cd5ce78ebf5096cccb","modified":1565077869291},{"_id":"public/categories/Programming/index.html","hash":"011d9c30fdd801a45cffe7d28b620c8f9cfe090c","modified":1565077869291},{"_id":"public/tags/html/index.html","hash":"b95f3630a8f68742758d654fdba269df31d8706d","modified":1565077869291},{"_id":"public/index.html","hash":"27a2123218f0b158d39393bfd099ea56071cab3d","modified":1565077869291},{"_id":"public/tags/js/index.html","hash":"2340c67a21b778113798b67bceec25e4407a612d","modified":1565077869291},{"_id":"public/CNAME","hash":"636cc40e605a7dfc46d46c27f6db1c450ecf8d28","modified":1565077869299},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1565077869299},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1565077869299},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1565077869299},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1565077869299},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1565077869300},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1565077869300},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1565077869300},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1565077869300},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1565077870045},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1565077870045},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1565077870046},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1565077870046},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1565077870046},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1565077870046},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1565077870046},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1565077870047},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1565077870047},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1565077870047},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1565077870047},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1565077870047},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1565077870047},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1565077870047},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1565077870047},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1565077870047},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1565077870047},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1565077870047},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1565077870047},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1565077870047},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1565077870047},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1565077870047},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1565077870048},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1565077870048},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1565077870048},{"_id":"public/css/main.css","hash":"fa9bfe91fb889011b00ea03dda3f7f766600b5f8","modified":1565077870071},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1565077870081},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1565077870092},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1565077870092},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1565077870093},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1565077870093},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1565077870093},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1565077870093},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1565077870093},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1565077870094},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1565077870094},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1565077870094},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1565077870094},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1565077870094},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1565077870094},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1565077870094},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1565077870094},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1565077870094},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1565077870094},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1565077870094},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1565077870094},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1565077870094},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1565077870094},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1565077870094},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1565077870094},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1565077870094},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1565077870095},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1565077870095},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1565077870095},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1565077870095},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1565077870095},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1565077870095},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1565077870095},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1565077870095},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1565077870095},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1565077870095},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1565077870095},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1565077870095},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1565077870095},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1565077870095},{"_id":"public/lib/fastclick/README.html","hash":"c5a4c05ca80132b7e343d5fd1d1d1a976b4ad151","modified":1565077870096},{"_id":"public/lib/jquery_lazyload/README.html","hash":"18a600ca1aafd3bf08af52b6a6fe5f056aeed9f4","modified":1565077870096},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"81057e5b518b8ab60474e1ad027e868b558f15b7","modified":1565077870096},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1565077870096},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1565077870098},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1565077870098},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1565077870099},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1565077870099},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1565077870099},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1565077870099},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1565077870099},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1565077870099},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1565077870099},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1565077870099},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1565077870099},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1565077870100},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1565077870100},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1565077870108},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1565077870108},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1565077870127},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1565077870127},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1565077870128},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1565077870128},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1565077870129},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1565077870129},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1565077870130},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1565077870143},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1565077870144},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1565077870164},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1565077870164},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1565077870209},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1565077870222},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1565077870222},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1565077870225},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1565077870232},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1565077870235}],"Category":[{"name":"Programming","_id":"cjyziybgt0003nkbncab1aeun"}],"Data":[],"Page":[{"title":"Programming","date":"2019-08-05T03:51:08.000Z","_content":"","source":"Programming/index.md","raw":"---\ntitle: Programming\ndate: 2019-08-05 11:51:08\n---\n","updated":"2019-08-05T04:10:24.593Z","path":"Programming/index.html","comments":1,"layout":"page","_id":"cjyziybgq0001nkbnlz34y1xz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-08-04T12:02:04.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-08-04 20:02:04\ntype: \"tags\"\n---\n","updated":"2019-08-04T12:02:18.177Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjyziybgr0002nkbnz0bve5hd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类目录","date":"2019-08-04T11:55:29.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类目录\ndate: 2019-08-04 19:55:29\ntype: \"categories\"\n---\n","updated":"2019-08-04T11:59:26.530Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjyziybgv0005nkbnjjr820na","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"HTMLCollection与NodeList","_content":"\n###\t**一、HTMLCollection**\n\nHTMLCollection是一个包含了元素（元素顺序为文档流中的顺序）的通用集合（generic collection），是一个类数组对象, 它还提供了用来从该集合中选择元素的方法和属性。\n\n**HTML DOM 中的 `HTMLCollection` 是即时更新的（live当其; 所包含的文档结构发生改变时, 它会自动更新, 所以遍历的时候需要注意.**\n\n> 注意：由于历史原因（DOM4之前，实现该接口的集合只能包含 HTML 元素），该接口被称为`HTMLCollection`。\n>\n> DOM有个节点树的概念, 节点(node)有不同种类, 例如**元素节点**、文本节点、属性节点... HTMLCollection中包含的HTML元素实际上就是元素节点\n>\n> nodeType一共有12种类:\n> 元素节点            　　 Node.ELEMENT_NODE(1)\n> 属性节点            　　 Node.ATTRIBUTE_NODE(2)\n> 文本节点            　　 Node.TEXT_NODE(3)\n> CDATA节点                 Node.CDATA_SECTION_NODE(4)\n> 实体引用名称节点 \tNode.ENTRY_REFERENCE_NODE(5)\n> 实体名称节点        　 Node.ENTITY_NODE(6)\n> 处理指令节点        　 Node.PROCESSING_INSTRUCTION_NODE(7)\n> 注释节点            　 \tNode.COMMENT_NODE(8)\n> 文档节点            　 \tNode.DOCUMENT_NODE(9)\n> 文档类型节点        　 Node.DOCUMENT_TYPE_NODE(10)\n> 文档片段节点        　 Node.DOCUMENT_FRAGMENT_NODE(11)\n> DTD声明节点             Node.NOTATION_NODE(12)\n\n####\t**属性:**\t\n\n+ HTMLCollection.length\t\n\n​\t\t返回集合当中子元素的数目.\n\n*使用像element.getElementsByTagName()等方式获取元素的时候返回的就是HTMLCollection对象而不是数组, 所以无法使用forEach这样的数组方法遍历, 不过使用for循环遍历是可以的. 不过可以使用Array.from(someHTMLCollection)这样的方式将其转换成数组.*\n\n#### **方法:**\n\n- HTMLCollection.item()\t通过索引返回其中的元素\n\n+ HMLCollection.namedItem()\n\n​\t\t根据 `Id `返回指定节点，或者作为备用，根据字符串所表示的 `name` 属性来匹配。根据 `name `匹配只能作为最后的依赖，并且只有当被引用的元素支持 `name` 属性时才能被匹配。如果不存在符合给定 `name `的节点，则返回 `null`。\n\n\n\n###\t**二、NodeList**\n\n`NodeList`对象是一个节点的集合, 是由`Node.childNodes`和`document.querySelectorAll()`返回的. NodeList是一个类数组(`Array-like`)的对象.\n\n在一些情况下, `NodeList`是一个实时的集合, 也就是说如果文档中的节点树发生变化, 已经存在的实时`NodeList`对象也会随之变化. 例如, `Node.childNodes`是实时的:\n\n```javascript\nconst parent = document.getElementById(\"parent\");\nconst chld_nodes = parent.childNodes;\nconsole.log(child_nodes.length);\t// 我们假设结果为2\nparent.appendChild(document.createElement(\"div\"));\t\nconsole.log(chid_nodes.length);\t\t//结果变成3了\n```\n\n在其他情况下, `NodeList`是一个静态集合, 也就意味着随后对文档对象模型的任何改动都不会影响集合的内容. 比兔`document.querySelectorAll()` 就会返回一个静态的`NodeList`. 最好牢记这种不同, 尤其是在对`NodeList`进行遍历的时候.\n\n#### **属性:**\n\n+ NodeList.length()\n\n#### **方法:**\n\n- [`NodeList.item()`](https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/item)\n\n- [`NodeList.entries()`](https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/entries)\n\n    Returns an [`iterator`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols), allowing code to go through all key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0 and the values are nodes.)\n\n- [`NodeList.forEach()`](https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/forEach)\n\n    Executes a provided function once per `NodeList` element, passing the element as an argument to the function.\n\n- [`NodeList.keys()`](https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/keys)\n\n    Returns an [`iterator`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols), allowing code to go through all the keys of the key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0.)\n\n- [`NodeList.values()`](https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/values)\n\n    Returns an [`iterator`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols) allowing code to go through all values (nodes) of the key/value pairs contained in the collection.\n\n### **总结一下HTMLCollection和NodeList的主要区别就在于:**\n\n+ `NodeList`中可包含所有12中节点类型, `HTMLCollection`中只能包含元素节点这一种;\n+ `NodeList`是类数组对象, 拥有`forEach()`, `entries()`, `keys()`等方法而`HTMLCollection`没有\n+ `HTMLCollection`是实时的, 而`NodeList`既可以是实时(`node.childNodes`返回的是实时的)也可以是静态的(`node.querySelectorAll()`返回的是静态的).\n\n另外提一下, 这里谈论的`NodeList`的静态集合跟使用`jQuery`获取元素是相似的, 都是获取了就不变了. 好像有点像`Linux`上做快照(`snapshot`), 就记录那一瞬间, 哈哈.\n\n\n\n### ***闲扯环节***\n\n上面已经写得很清楚了, 记住区别就行. 下面介绍一下stackoverflow上一位答主判断`HTMLCollection`和`NodeList`什么时候静态什么时候实时的代码, 或许可以帮助理解.\n\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>isLive</title>\n</head>\n<body>\n    <div class=\"c\" name=\"myDiv\">C1</div>\n    <div class=\"c\" name=\"myDiv\">C2</div>\n    <script>\n        window.onload = function () {\n            function isLive(collection) {\n                if (collection.length < 1) {\n                    return undefined; \n                }\n                let body = document.getElementsByTagName('body')[0];\n                let len1 = collection.length;\n                let clone = collection.item(0).cloneNode();\n                clone.style.display = \"none\";\n                body.appendChild(clone);\n                let len2 = collection.length;\n                body.removeChild(clone);\n                return len2 !== len1;\n            }\n\n\n\n            divs1 = document.getElementsByClassName('c');\n            console.log(\"document.getElementsByClassName('c'): \",divs1.toString()); //\"[object HTMLCollection]\"\n\n\n            divs2 = document.querySelectorAll('.c');\n            console.log(\"document.querySelectorAll('.c'): \",divs2.toString()); //\"[object NodeList]\"\n\n            divs3 = document.getElementsByName('myDiv');\n            console.log(\"document.getElementsByName('myDiv'): \",divs3.toString()); //\"[object NodeList\"]\n\n            console.log(\"isLive(divs1)\",isLive(divs1)); //true\n            console.log(\"isLive(divs2)\",isLive(divs2)); //false\n            console.log(\"isLive(divs3)\",isLive(divs3)); //true\n        }\n    </script>\n</body>\n</html>\n```\n\n`isLive`函数做的事情就是: 先获取集合,  将其`lengh`赋值个`len1`, 然后从集合里面克隆一个元素并且添加到`body`下面, 接着将length赋值给`len2`, 然后为了不影响页面而删除添加的元素.如果是实时的那么集合的lenght肯定会跟着变化, 第二次赋值时的`lengh`就会和比第一次大1; 反之如果是静态的那么`length`根本不会有变化. 所以代码最后就比较了 `len1 `和 `len2 `相不相等, 做出了静态与实时的判断.","source":"_posts/HTMLCollection与NodeList.md","raw":"---\ntitle: HTMLCollection与NodeList\ntags: \n- html\n- js\ncategories: Programming\n---\n\n###\t**一、HTMLCollection**\n\nHTMLCollection是一个包含了元素（元素顺序为文档流中的顺序）的通用集合（generic collection），是一个类数组对象, 它还提供了用来从该集合中选择元素的方法和属性。\n\n**HTML DOM 中的 `HTMLCollection` 是即时更新的（live当其; 所包含的文档结构发生改变时, 它会自动更新, 所以遍历的时候需要注意.**\n\n> 注意：由于历史原因（DOM4之前，实现该接口的集合只能包含 HTML 元素），该接口被称为`HTMLCollection`。\n>\n> DOM有个节点树的概念, 节点(node)有不同种类, 例如**元素节点**、文本节点、属性节点... HTMLCollection中包含的HTML元素实际上就是元素节点\n>\n> nodeType一共有12种类:\n> 元素节点            　　 Node.ELEMENT_NODE(1)\n> 属性节点            　　 Node.ATTRIBUTE_NODE(2)\n> 文本节点            　　 Node.TEXT_NODE(3)\n> CDATA节点                 Node.CDATA_SECTION_NODE(4)\n> 实体引用名称节点 \tNode.ENTRY_REFERENCE_NODE(5)\n> 实体名称节点        　 Node.ENTITY_NODE(6)\n> 处理指令节点        　 Node.PROCESSING_INSTRUCTION_NODE(7)\n> 注释节点            　 \tNode.COMMENT_NODE(8)\n> 文档节点            　 \tNode.DOCUMENT_NODE(9)\n> 文档类型节点        　 Node.DOCUMENT_TYPE_NODE(10)\n> 文档片段节点        　 Node.DOCUMENT_FRAGMENT_NODE(11)\n> DTD声明节点             Node.NOTATION_NODE(12)\n\n####\t**属性:**\t\n\n+ HTMLCollection.length\t\n\n​\t\t返回集合当中子元素的数目.\n\n*使用像element.getElementsByTagName()等方式获取元素的时候返回的就是HTMLCollection对象而不是数组, 所以无法使用forEach这样的数组方法遍历, 不过使用for循环遍历是可以的. 不过可以使用Array.from(someHTMLCollection)这样的方式将其转换成数组.*\n\n#### **方法:**\n\n- HTMLCollection.item()\t通过索引返回其中的元素\n\n+ HMLCollection.namedItem()\n\n​\t\t根据 `Id `返回指定节点，或者作为备用，根据字符串所表示的 `name` 属性来匹配。根据 `name `匹配只能作为最后的依赖，并且只有当被引用的元素支持 `name` 属性时才能被匹配。如果不存在符合给定 `name `的节点，则返回 `null`。\n\n\n\n###\t**二、NodeList**\n\n`NodeList`对象是一个节点的集合, 是由`Node.childNodes`和`document.querySelectorAll()`返回的. NodeList是一个类数组(`Array-like`)的对象.\n\n在一些情况下, `NodeList`是一个实时的集合, 也就是说如果文档中的节点树发生变化, 已经存在的实时`NodeList`对象也会随之变化. 例如, `Node.childNodes`是实时的:\n\n```javascript\nconst parent = document.getElementById(\"parent\");\nconst chld_nodes = parent.childNodes;\nconsole.log(child_nodes.length);\t// 我们假设结果为2\nparent.appendChild(document.createElement(\"div\"));\t\nconsole.log(chid_nodes.length);\t\t//结果变成3了\n```\n\n在其他情况下, `NodeList`是一个静态集合, 也就意味着随后对文档对象模型的任何改动都不会影响集合的内容. 比兔`document.querySelectorAll()` 就会返回一个静态的`NodeList`. 最好牢记这种不同, 尤其是在对`NodeList`进行遍历的时候.\n\n#### **属性:**\n\n+ NodeList.length()\n\n#### **方法:**\n\n- [`NodeList.item()`](https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/item)\n\n- [`NodeList.entries()`](https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/entries)\n\n    Returns an [`iterator`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols), allowing code to go through all key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0 and the values are nodes.)\n\n- [`NodeList.forEach()`](https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/forEach)\n\n    Executes a provided function once per `NodeList` element, passing the element as an argument to the function.\n\n- [`NodeList.keys()`](https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/keys)\n\n    Returns an [`iterator`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols), allowing code to go through all the keys of the key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0.)\n\n- [`NodeList.values()`](https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/values)\n\n    Returns an [`iterator`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols) allowing code to go through all values (nodes) of the key/value pairs contained in the collection.\n\n### **总结一下HTMLCollection和NodeList的主要区别就在于:**\n\n+ `NodeList`中可包含所有12中节点类型, `HTMLCollection`中只能包含元素节点这一种;\n+ `NodeList`是类数组对象, 拥有`forEach()`, `entries()`, `keys()`等方法而`HTMLCollection`没有\n+ `HTMLCollection`是实时的, 而`NodeList`既可以是实时(`node.childNodes`返回的是实时的)也可以是静态的(`node.querySelectorAll()`返回的是静态的).\n\n另外提一下, 这里谈论的`NodeList`的静态集合跟使用`jQuery`获取元素是相似的, 都是获取了就不变了. 好像有点像`Linux`上做快照(`snapshot`), 就记录那一瞬间, 哈哈.\n\n\n\n### ***闲扯环节***\n\n上面已经写得很清楚了, 记住区别就行. 下面介绍一下stackoverflow上一位答主判断`HTMLCollection`和`NodeList`什么时候静态什么时候实时的代码, 或许可以帮助理解.\n\n```javascript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>isLive</title>\n</head>\n<body>\n    <div class=\"c\" name=\"myDiv\">C1</div>\n    <div class=\"c\" name=\"myDiv\">C2</div>\n    <script>\n        window.onload = function () {\n            function isLive(collection) {\n                if (collection.length < 1) {\n                    return undefined; \n                }\n                let body = document.getElementsByTagName('body')[0];\n                let len1 = collection.length;\n                let clone = collection.item(0).cloneNode();\n                clone.style.display = \"none\";\n                body.appendChild(clone);\n                let len2 = collection.length;\n                body.removeChild(clone);\n                return len2 !== len1;\n            }\n\n\n\n            divs1 = document.getElementsByClassName('c');\n            console.log(\"document.getElementsByClassName('c'): \",divs1.toString()); //\"[object HTMLCollection]\"\n\n\n            divs2 = document.querySelectorAll('.c');\n            console.log(\"document.querySelectorAll('.c'): \",divs2.toString()); //\"[object NodeList]\"\n\n            divs3 = document.getElementsByName('myDiv');\n            console.log(\"document.getElementsByName('myDiv'): \",divs3.toString()); //\"[object NodeList\"]\n\n            console.log(\"isLive(divs1)\",isLive(divs1)); //true\n            console.log(\"isLive(divs2)\",isLive(divs2)); //false\n            console.log(\"isLive(divs3)\",isLive(divs3)); //true\n        }\n    </script>\n</body>\n</html>\n```\n\n`isLive`函数做的事情就是: 先获取集合,  将其`lengh`赋值个`len1`, 然后从集合里面克隆一个元素并且添加到`body`下面, 接着将length赋值给`len2`, 然后为了不影响页面而删除添加的元素.如果是实时的那么集合的lenght肯定会跟着变化, 第二次赋值时的`lengh`就会和比第一次大1; 反之如果是静态的那么`length`根本不会有变化. 所以代码最后就比较了 `len1 `和 `len2 `相不相等, 做出了静态与实时的判断.","slug":"HTMLCollection与NodeList","published":1,"date":"2019-08-06T05:50:15.776Z","updated":"2019-08-06T07:50:21.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyziybgk0000nkbnpp2fnp59","content":"<h3 id=\"一、HTMLCollection\"><a href=\"#一、HTMLCollection\" class=\"headerlink\" title=\"一、HTMLCollection\"></a><strong>一、HTMLCollection</strong></h3><p>HTMLCollection是一个包含了元素（元素顺序为文档流中的顺序）的通用集合（generic collection），是一个类数组对象, 它还提供了用来从该集合中选择元素的方法和属性。</p>\n<p><strong>HTML DOM 中的 <code>HTMLCollection</code> 是即时更新的（live当其; 所包含的文档结构发生改变时, 它会自动更新, 所以遍历的时候需要注意.</strong></p>\n<blockquote>\n<p>注意：由于历史原因（DOM4之前，实现该接口的集合只能包含 HTML 元素），该接口被称为<code>HTMLCollection</code>。</p>\n<p>DOM有个节点树的概念, 节点(node)有不同种类, 例如<strong>元素节点</strong>、文本节点、属性节点… HTMLCollection中包含的HTML元素实际上就是元素节点</p>\n<p>nodeType一共有12种类:<br>元素节点            　　 Node.ELEMENT_NODE(1)<br>属性节点            　　 Node.ATTRIBUTE_NODE(2)<br>文本节点            　　 Node.TEXT_NODE(3)<br>CDATA节点                 Node.CDATA_SECTION_NODE(4)<br>实体引用名称节点     Node.ENTRY_REFERENCE_NODE(5)<br>实体名称节点        　 Node.ENTITY_NODE(6)<br>处理指令节点        　 Node.PROCESSING_INSTRUCTION_NODE(7)<br>注释节点            　     Node.COMMENT_NODE(8)<br>文档节点            　     Node.DOCUMENT_NODE(9)<br>文档类型节点        　 Node.DOCUMENT_TYPE_NODE(10)<br>文档片段节点        　 Node.DOCUMENT_FRAGMENT_NODE(11)<br>DTD声明节点             Node.NOTATION_NODE(12)</p>\n</blockquote>\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性:\"></a><strong>属性:</strong></h4><ul>\n<li>HTMLCollection.length    </li>\n</ul>\n<p>​        返回集合当中子元素的数目.</p>\n<p><em>使用像element.getElementsByTagName()等方式获取元素的时候返回的就是HTMLCollection对象而不是数组, 所以无法使用forEach这样的数组方法遍历, 不过使用for循环遍历是可以的. 不过可以使用Array.from(someHTMLCollection)这样的方式将其转换成数组.</em></p>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法:\"></a><strong>方法:</strong></h4><ul>\n<li>HTMLCollection.item()    通过索引返回其中的元素</li>\n</ul>\n<ul>\n<li>HMLCollection.namedItem()</li>\n</ul>\n<p>​        根据 <code>Id</code>返回指定节点，或者作为备用，根据字符串所表示的 <code>name</code> 属性来匹配。根据 <code>name</code>匹配只能作为最后的依赖，并且只有当被引用的元素支持 <code>name</code> 属性时才能被匹配。如果不存在符合给定 <code>name</code>的节点，则返回 <code>null</code>。</p>\n<h3 id=\"二、NodeList\"><a href=\"#二、NodeList\" class=\"headerlink\" title=\"二、NodeList\"></a><strong>二、NodeList</strong></h3><p><code>NodeList</code>对象是一个节点的集合, 是由<code>Node.childNodes</code>和<code>document.querySelectorAll()</code>返回的. NodeList是一个类数组(<code>Array-like</code>)的对象.</p>\n<p>在一些情况下, <code>NodeList</code>是一个实时的集合, 也就是说如果文档中的节点树发生变化, 已经存在的实时<code>NodeList</code>对象也会随之变化. 例如, <code>Node.childNodes</code>是实时的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parent = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"parent\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> chld_nodes = parent.childNodes;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child_nodes.length);\t<span class=\"comment\">// 我们假设结果为2</span></span><br><span class=\"line\">parent.appendChild(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>));\t</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(chid_nodes.length);\t\t<span class=\"comment\">//结果变成3了</span></span><br></pre></td></tr></table></figure>\n\n<p>在其他情况下, <code>NodeList</code>是一个静态集合, 也就意味着随后对文档对象模型的任何改动都不会影响集合的内容. 比兔<code>document.querySelectorAll()</code> 就会返回一个静态的<code>NodeList</code>. 最好牢记这种不同, 尤其是在对<code>NodeList</code>进行遍历的时候.</p>\n<h4 id=\"属性-1\"><a href=\"#属性-1\" class=\"headerlink\" title=\"属性:\"></a><strong>属性:</strong></h4><ul>\n<li>NodeList.length()</li>\n</ul>\n<h4 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法:\"></a><strong>方法:</strong></h4><ul>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/item\" target=\"_blank\" rel=\"noopener\"><code>NodeList.item()</code></a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/entries\" target=\"_blank\" rel=\"noopener\"><code>NodeList.entries()</code></a></p>\n<p>  Returns an <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols\" target=\"_blank\" rel=\"noopener\"><code>iterator</code></a>, allowing code to go through all key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0 and the values are nodes.)</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/forEach\" target=\"_blank\" rel=\"noopener\"><code>NodeList.forEach()</code></a></p>\n<p>  Executes a provided function once per <code>NodeList</code> element, passing the element as an argument to the function.</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/keys\" target=\"_blank\" rel=\"noopener\"><code>NodeList.keys()</code></a></p>\n<p>  Returns an <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols\" target=\"_blank\" rel=\"noopener\"><code>iterator</code></a>, allowing code to go through all the keys of the key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0.)</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/values\" target=\"_blank\" rel=\"noopener\"><code>NodeList.values()</code></a></p>\n<p>  Returns an <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols\" target=\"_blank\" rel=\"noopener\"><code>iterator</code></a> allowing code to go through all values (nodes) of the key/value pairs contained in the collection.</p>\n</li>\n</ul>\n<h3 id=\"总结一下HTMLCollection和NodeList的主要区别就在于\"><a href=\"#总结一下HTMLCollection和NodeList的主要区别就在于\" class=\"headerlink\" title=\"总结一下HTMLCollection和NodeList的主要区别就在于:\"></a><strong>总结一下HTMLCollection和NodeList的主要区别就在于:</strong></h3><ul>\n<li><code>NodeList</code>中可包含所有12中节点类型, <code>HTMLCollection</code>中只能包含元素节点这一种;</li>\n<li><code>NodeList</code>是类数组对象, 拥有<code>forEach()</code>, <code>entries()</code>, <code>keys()</code>等方法而<code>HTMLCollection</code>没有</li>\n<li><code>HTMLCollection</code>是实时的, 而<code>NodeList</code>既可以是实时(<code>node.childNodes</code>返回的是实时的)也可以是静态的(<code>node.querySelectorAll()</code>返回的是静态的).</li>\n</ul>\n<p>另外提一下, 这里谈论的<code>NodeList</code>的静态集合跟使用<code>jQuery</code>获取元素是相似的, 都是获取了就不变了. 好像有点像<code>Linux</code>上做快照(<code>snapshot</code>), 就记录那一瞬间, 哈哈.</p>\n<h3 id=\"闲扯环节\"><a href=\"#闲扯环节\" class=\"headerlink\" title=\"闲扯环节\"></a><strong><em>闲扯环节</em></strong></h3><p>上面已经写得很清楚了, 记住区别就行. 下面介绍一下stackoverflow上一位答主判断<code>HTMLCollection</code>和<code>NodeList</code>什么时候静态什么时候实时的代码, 或许可以帮助理解.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;isLive&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"c\"</span> name=<span class=\"string\">\"myDiv\"</span>&gt;C1&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div class=\"c\" name=\"myDiv\"&gt;C2&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isLive</span>(<span class=\"params\">collection</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (collection.length &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>; </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> body = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">                <span class=\"keyword\">let</span> len1 = collection.length;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> clone = collection.item(<span class=\"number\">0</span>).cloneNode();</span><br><span class=\"line\">                clone.style.display = <span class=\"string\">\"none\"</span>;</span><br><span class=\"line\">                body.appendChild(clone);</span><br><span class=\"line\">                <span class=\"keyword\">let</span> len2 = collection.length;</span><br><span class=\"line\">                body.removeChild(clone);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> len2 !== len1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            divs1 = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'c'</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"document.getElementsByClassName('c'): \"</span>,divs1.toString()); <span class=\"comment\">//\"[object HTMLCollection]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            divs2 = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.c'</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"document.querySelectorAll('.c'): \"</span>,divs2.toString()); <span class=\"comment\">//\"[object NodeList]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">            divs3 = <span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">'myDiv'</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"document.getElementsByName('myDiv'): \"</span>,divs3.toString()); <span class=\"comment\">//\"[object NodeList\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"isLive(divs1)\"</span>,isLive(divs1)); <span class=\"comment\">//true</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"isLive(divs2)\"</span>,isLive(divs2)); <span class=\"comment\">//false</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"isLive(divs3)\"</span>,isLive(divs3)); <span class=\"comment\">//true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>isLive</code>函数做的事情就是: 先获取集合,  将其<code>lengh</code>赋值个<code>len1</code>, 然后从集合里面克隆一个元素并且添加到<code>body</code>下面, 接着将length赋值给<code>len2</code>, 然后为了不影响页面而删除添加的元素.如果是实时的那么集合的lenght肯定会跟着变化, 第二次赋值时的<code>lengh</code>就会和比第一次大1; 反之如果是静态的那么<code>length</code>根本不会有变化. 所以代码最后就比较了 <code>len1</code>和 <code>len2</code>相不相等, 做出了静态与实时的判断.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、HTMLCollection\"><a href=\"#一、HTMLCollection\" class=\"headerlink\" title=\"一、HTMLCollection\"></a><strong>一、HTMLCollection</strong></h3><p>HTMLCollection是一个包含了元素（元素顺序为文档流中的顺序）的通用集合（generic collection），是一个类数组对象, 它还提供了用来从该集合中选择元素的方法和属性。</p>\n<p><strong>HTML DOM 中的 <code>HTMLCollection</code> 是即时更新的（live当其; 所包含的文档结构发生改变时, 它会自动更新, 所以遍历的时候需要注意.</strong></p>\n<blockquote>\n<p>注意：由于历史原因（DOM4之前，实现该接口的集合只能包含 HTML 元素），该接口被称为<code>HTMLCollection</code>。</p>\n<p>DOM有个节点树的概念, 节点(node)有不同种类, 例如<strong>元素节点</strong>、文本节点、属性节点… HTMLCollection中包含的HTML元素实际上就是元素节点</p>\n<p>nodeType一共有12种类:<br>元素节点            　　 Node.ELEMENT_NODE(1)<br>属性节点            　　 Node.ATTRIBUTE_NODE(2)<br>文本节点            　　 Node.TEXT_NODE(3)<br>CDATA节点                 Node.CDATA_SECTION_NODE(4)<br>实体引用名称节点     Node.ENTRY_REFERENCE_NODE(5)<br>实体名称节点        　 Node.ENTITY_NODE(6)<br>处理指令节点        　 Node.PROCESSING_INSTRUCTION_NODE(7)<br>注释节点            　     Node.COMMENT_NODE(8)<br>文档节点            　     Node.DOCUMENT_NODE(9)<br>文档类型节点        　 Node.DOCUMENT_TYPE_NODE(10)<br>文档片段节点        　 Node.DOCUMENT_FRAGMENT_NODE(11)<br>DTD声明节点             Node.NOTATION_NODE(12)</p>\n</blockquote>\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性:\"></a><strong>属性:</strong></h4><ul>\n<li>HTMLCollection.length    </li>\n</ul>\n<p>​        返回集合当中子元素的数目.</p>\n<p><em>使用像element.getElementsByTagName()等方式获取元素的时候返回的就是HTMLCollection对象而不是数组, 所以无法使用forEach这样的数组方法遍历, 不过使用for循环遍历是可以的. 不过可以使用Array.from(someHTMLCollection)这样的方式将其转换成数组.</em></p>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法:\"></a><strong>方法:</strong></h4><ul>\n<li>HTMLCollection.item()    通过索引返回其中的元素</li>\n</ul>\n<ul>\n<li>HMLCollection.namedItem()</li>\n</ul>\n<p>​        根据 <code>Id</code>返回指定节点，或者作为备用，根据字符串所表示的 <code>name</code> 属性来匹配。根据 <code>name</code>匹配只能作为最后的依赖，并且只有当被引用的元素支持 <code>name</code> 属性时才能被匹配。如果不存在符合给定 <code>name</code>的节点，则返回 <code>null</code>。</p>\n<h3 id=\"二、NodeList\"><a href=\"#二、NodeList\" class=\"headerlink\" title=\"二、NodeList\"></a><strong>二、NodeList</strong></h3><p><code>NodeList</code>对象是一个节点的集合, 是由<code>Node.childNodes</code>和<code>document.querySelectorAll()</code>返回的. NodeList是一个类数组(<code>Array-like</code>)的对象.</p>\n<p>在一些情况下, <code>NodeList</code>是一个实时的集合, 也就是说如果文档中的节点树发生变化, 已经存在的实时<code>NodeList</code>对象也会随之变化. 例如, <code>Node.childNodes</code>是实时的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parent = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"parent\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> chld_nodes = parent.childNodes;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(child_nodes.length);\t<span class=\"comment\">// 我们假设结果为2</span></span><br><span class=\"line\">parent.appendChild(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>));\t</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(chid_nodes.length);\t\t<span class=\"comment\">//结果变成3了</span></span><br></pre></td></tr></table></figure>\n\n<p>在其他情况下, <code>NodeList</code>是一个静态集合, 也就意味着随后对文档对象模型的任何改动都不会影响集合的内容. 比兔<code>document.querySelectorAll()</code> 就会返回一个静态的<code>NodeList</code>. 最好牢记这种不同, 尤其是在对<code>NodeList</code>进行遍历的时候.</p>\n<h4 id=\"属性-1\"><a href=\"#属性-1\" class=\"headerlink\" title=\"属性:\"></a><strong>属性:</strong></h4><ul>\n<li>NodeList.length()</li>\n</ul>\n<h4 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法:\"></a><strong>方法:</strong></h4><ul>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/item\" target=\"_blank\" rel=\"noopener\"><code>NodeList.item()</code></a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/entries\" target=\"_blank\" rel=\"noopener\"><code>NodeList.entries()</code></a></p>\n<p>  Returns an <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols\" target=\"_blank\" rel=\"noopener\"><code>iterator</code></a>, allowing code to go through all key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0 and the values are nodes.)</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/forEach\" target=\"_blank\" rel=\"noopener\"><code>NodeList.forEach()</code></a></p>\n<p>  Executes a provided function once per <code>NodeList</code> element, passing the element as an argument to the function.</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/keys\" target=\"_blank\" rel=\"noopener\"><code>NodeList.keys()</code></a></p>\n<p>  Returns an <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols\" target=\"_blank\" rel=\"noopener\"><code>iterator</code></a>, allowing code to go through all the keys of the key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0.)</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/values\" target=\"_blank\" rel=\"noopener\"><code>NodeList.values()</code></a></p>\n<p>  Returns an <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols\" target=\"_blank\" rel=\"noopener\"><code>iterator</code></a> allowing code to go through all values (nodes) of the key/value pairs contained in the collection.</p>\n</li>\n</ul>\n<h3 id=\"总结一下HTMLCollection和NodeList的主要区别就在于\"><a href=\"#总结一下HTMLCollection和NodeList的主要区别就在于\" class=\"headerlink\" title=\"总结一下HTMLCollection和NodeList的主要区别就在于:\"></a><strong>总结一下HTMLCollection和NodeList的主要区别就在于:</strong></h3><ul>\n<li><code>NodeList</code>中可包含所有12中节点类型, <code>HTMLCollection</code>中只能包含元素节点这一种;</li>\n<li><code>NodeList</code>是类数组对象, 拥有<code>forEach()</code>, <code>entries()</code>, <code>keys()</code>等方法而<code>HTMLCollection</code>没有</li>\n<li><code>HTMLCollection</code>是实时的, 而<code>NodeList</code>既可以是实时(<code>node.childNodes</code>返回的是实时的)也可以是静态的(<code>node.querySelectorAll()</code>返回的是静态的).</li>\n</ul>\n<p>另外提一下, 这里谈论的<code>NodeList</code>的静态集合跟使用<code>jQuery</code>获取元素是相似的, 都是获取了就不变了. 好像有点像<code>Linux</code>上做快照(<code>snapshot</code>), 就记录那一瞬间, 哈哈.</p>\n<h3 id=\"闲扯环节\"><a href=\"#闲扯环节\" class=\"headerlink\" title=\"闲扯环节\"></a><strong><em>闲扯环节</em></strong></h3><p>上面已经写得很清楚了, 记住区别就行. 下面介绍一下stackoverflow上一位答主判断<code>HTMLCollection</code>和<code>NodeList</code>什么时候静态什么时候实时的代码, 或许可以帮助理解.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;isLive&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"c\"</span> name=<span class=\"string\">\"myDiv\"</span>&gt;C1&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div class=\"c\" name=\"myDiv\"&gt;C2&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isLive</span>(<span class=\"params\">collection</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (collection.length &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>; </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> body = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">                <span class=\"keyword\">let</span> len1 = collection.length;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> clone = collection.item(<span class=\"number\">0</span>).cloneNode();</span><br><span class=\"line\">                clone.style.display = <span class=\"string\">\"none\"</span>;</span><br><span class=\"line\">                body.appendChild(clone);</span><br><span class=\"line\">                <span class=\"keyword\">let</span> len2 = collection.length;</span><br><span class=\"line\">                body.removeChild(clone);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> len2 !== len1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            divs1 = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'c'</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"document.getElementsByClassName('c'): \"</span>,divs1.toString()); <span class=\"comment\">//\"[object HTMLCollection]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            divs2 = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.c'</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"document.querySelectorAll('.c'): \"</span>,divs2.toString()); <span class=\"comment\">//\"[object NodeList]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">            divs3 = <span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">'myDiv'</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"document.getElementsByName('myDiv'): \"</span>,divs3.toString()); <span class=\"comment\">//\"[object NodeList\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"isLive(divs1)\"</span>,isLive(divs1)); <span class=\"comment\">//true</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"isLive(divs2)\"</span>,isLive(divs2)); <span class=\"comment\">//false</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"isLive(divs3)\"</span>,isLive(divs3)); <span class=\"comment\">//true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>isLive</code>函数做的事情就是: 先获取集合,  将其<code>lengh</code>赋值个<code>len1</code>, 然后从集合里面克隆一个元素并且添加到<code>body</code>下面, 接着将length赋值给<code>len2</code>, 然后为了不影响页面而删除添加的元素.如果是实时的那么集合的lenght肯定会跟着变化, 第二次赋值时的<code>lengh</code>就会和比第一次大1; 反之如果是静态的那么<code>length</code>根本不会有变化. 所以代码最后就比较了 <code>len1</code>和 <code>len2</code>相不相等, 做出了静态与实时的判断.</p>\n"},{"title":"JavaScript中的this","date":"2019-08-05T03:45:35.000Z","_content":"\n###\t一、理解常规函数中的this\n\n​\t\tthis指的是运行当前这段函数代码的对象,或者说指的是函数运行时所在的环境. \n\n```javascript\nvar obj = {\n  foo: function () { console.log(this.bar) },\n  bar: 1\n};\n\nvar foo = obj.foo;\nvar bar = 2;\n\nobj.foo() // 1\nfoo() // 2\n```\n\n​\t\t对于``obj.foo()``来说, `foo`运行在`obj`环境, 调用者是`obj`, 所以this指向`obj`; 对于`foo()`来说, `foo`运行在全局环境,  调用者是window, 所以`this`指向全局环境. 不同环境不同作用域读取到的变量不同很正常, 所以两者的运行结果会不一样.\n\n​\t\t这里我们要谈到一个叫执行上下文的玩意儿. JavaScript中执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。对于每个执行上下文，都有三个重要属性：变量对象(Variable object，VO), 作用域链(Scope chain)和this.\n\n​\t\t一个函数定义之后可以在很多不同的地方被调用,  函数内部的this就在函数运行时指明了执行上下文, 也就是说明了**是哪个家伙 在哪里 调戏(调用)了我**. 这时候函数内部就能知道作用域是什么,有哪些变量是自己可以读取到的. 简单地说,要知道`this`指向什么, 我们只**需要搞清楚函数是在什么时候什么地方被谁如何被调用的**即可, 并不需要关注函数在哪里定义或声明.\n\n​\t\t`this`是使用[`call()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)方法调用函数时传递的第一个参数, 他可以在函数调用时修改, 在函数没有调用的时候, this的值是无法确定的.\n\n​\t\t接下来具体看看函数的调用, 以及不同情况下this指向哪里, 我们会借助call()方法来帮助理解.\n\n####\t(一)存粹的函数调用\n\n​\t\t第一种方法最常见, 例子如下:\n\n```javascript\nfunction test(name) {\n\tconsole.log(name);\n    console.log(this);\n}\ntest(\"Jerry\");\n```\n\n​\t\t这种方法我们平常使用的最多,但是这种函数调用方法只是一种简写,它完整的写法是下面这样的:\n\n```javascript\nfunction test(name) {\n    console.log(name);\n    console.log(this);\n}\ntest.call(undefined, \"Tom\");\t\n```\n\n​\t\t注意上面的`call`方法, **`call`方法接收的第一个参数就是this, 这里我们传了一个`undefined`**. 那么,依据定义,函数执行之后`console.log()`出来的会是`undefined`吗? 不是! (传入null或者undefined默认代表window对象)\n\n​\t\t所以在这里调用test函数的是window, `this`就是指向的window全局对象. 执行上下文也就是全局执行上下文了. \n\n####\t (二)作为对象方法的调用\n\n​\t\t函数还可以作为某个对象的方法调用,这时候一般`this`就指这个上级对象. (用call()方法可以例外哦)\n\n例子:\n\n```javascript\nconst obj = {\n    name: \"Jerry\",\n    greet: function() {\n        console.log(this.name);\n\t}\n}\nobj.greet();\t// 第一种调用方式\nobj.greet.call(obj) \t//第二种调用方式\n```\n\n​\t\t以上例子中的第一种调用方式实际上只是第二种方式的语法糖, 第二种才是完整的调用方法, **第二种方法厉害的地方就在于它可以手动指定this.**\n\n手动指定`this`的例子:\n\n```javascript\nconst obj = {\n    name: \"Jerry\",\n    greet: function() {\n\t\tconsole.log(this.name);\n    }\n}\nobj.greet.call({name: \"Trump\"}); \t// 打出来是 Trump\n```\n\n​\t\t上面例子`call`方法调用函数时传入的是一个对象, 这个对象就是手动指定的`this`, 因此`greet()`行数中`console.log(this.name)`打印出来的就是Trump了. 这个例子也验证了文章第一段所说的:\n\n> 我们只需要搞清楚函数是在什么时候什么地方如何被调用的即可, 并不需要关注函数在哪里定义或声明.\n\n\n\n####\t(三)构造函数中的this\n\n​\t\t构造函数中的`this`有一点特殊, 每个构造函数在new之后都会返回一个实例对象, `this`就指这个实例对象.\n\n例子:\n\n```javascript\nfunction Test() {\n\tthis.name = \"Tom\";\n}\nlet p = new Test();\nconsole.log(typeof p); \t// object\nconsole.log(p.name); \t// Tom\n```\n\n#### \t(四)window.setTimeout() 和window.setInterval()中函数的调用\n\n​\t\t他们两个函数中的`this`有些特殊,里面的`this`默认是`window`对象.\n\n​\t\t***简单总结一下：函数完整的调用方法是使用call方法，包括`test.call(context, name)`和`obj.greet.call(context,name)`，这里的context就是函数调用时的上下文，也就是`this`，只不过这个this是可以通过call方法来修改的；构造函数稍微特殊一点，它的`this`直接指向new之后返回的对象；`window.setTimeout()`和`window.setInterval()`默认的是`this`是window对象。***\n\n### 二、理解箭头函数中的this\n\n​\t\t**箭头函数表达式**的语法比[函数表达式](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/function)更简洁，并且没有自己的[this](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this)，[arguments](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments)，[super](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super)或 [new.target](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new.target)。这些函数表达式更适用于那些本来需要匿名函数的地方，并且它们不能用作构造函数。\n\n####\t(一)箭头函数默认不绑定this\n\n​\t\t在箭头函数出现之前，每个新定义的函数都有它自己的 `this`值（在构造函数的情况下是一个新对象，在严格模式的函数调用中为 undefined，如果该函数被作为“对象方法”调用则为基础对象等）。`this`被证明是令人厌烦的面向对象风格的编程。**箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承this。**\n\n不使用箭头函数的例子:\n\n```javascript\nconst obj = {\n    a: function() {\n        console.log(this);\n    }\n}\nobj.a();\t// 打印出的是obj对象\n```\n\n使用箭头函数的例子：\n\n```javascript\nconst obj ={\n    a: () => console.log(this)\n}\nobj.a();\t// 打印出来的是window\n```\n\n​\t\t上面这个例子中, 从作用域链上层(这里的上层也就是window)继承了this\n\n再来个例子:\n\n```javascript\nfunction test() {\n                const myObj = {\n                    name: \"hejian\",\n                    greeting: () => console.log(this)\n                }\n                return myObj.greeting();\n            }\ntest();\t// 打印出来的是window\n```\n\n​\t\t以上这个例子, 如果箭头函数像普通函数一样默认绑定`this`的话, 它的this应该指向`myObj`. 但是由于 **箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承`this`**,  所以这里就向作用域链的上级`test()`这一层作用域中查询,test()是个普通函数默认有this, 那么查询到这里就结束了. 那么这个this指向哪里呢? 答案就是指向window! 为了方便理解例子的最后一行可以用这种方式写: `test.call(undefined)`\n\n#### (二)不能用call方法修改箭头函数的this\n\n​\t\t由于 箭头函数没有自己的this指针，通过 [`call()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call) *或* [`apply()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) 方法调用一个函数时，只能传递参数（不能绑定this），他们的第一个参数会被忽略。（这种现象对于bind方法同样成立）\n\n```javascript\nlet adder = {\n  base : 1,\n  add : function(a) {\n    var f = v => v + this.base;\n    return f(a);\n  },\n  addThruCall: function(a) {\n    var f = v => v + this.base;\n    var b = {\n      base : 2\n    };        \n    return f.call(b, a);\n  }\n};\n\nconsole.log(adder.add(1));         // 输出 2\nconsole.log(adder.addThruCall(1)); // 仍然输出 2（而不是3 ——译者注）\n```\n\n如上所示, 企图用call方法作用与箭头函数来手动指定this是行不通的.\n\n\n\n**参考:**\n\n1. [掘金 \\- JS中的箭头函数与this](https://juejin.im/post/5aa1eb056fb9a028b77a66fd)\n2. [JavaScript - all about this keyword](https://codeburst.io/all-about-this-and-new-keywords-in-javascript-38039f71780c)\n3. [MDN \\- 使用对象](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Functions)\n4. [MDN \\- 使用函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects)\n\n","source":"_posts/JacaScript中的this.md","raw":"---\ntitle: JavaScript中的this\ndate: 2019-08-05 11:45:35\ntags: js\ncategories: Programming\n---\n\n###\t一、理解常规函数中的this\n\n​\t\tthis指的是运行当前这段函数代码的对象,或者说指的是函数运行时所在的环境. \n\n```javascript\nvar obj = {\n  foo: function () { console.log(this.bar) },\n  bar: 1\n};\n\nvar foo = obj.foo;\nvar bar = 2;\n\nobj.foo() // 1\nfoo() // 2\n```\n\n​\t\t对于``obj.foo()``来说, `foo`运行在`obj`环境, 调用者是`obj`, 所以this指向`obj`; 对于`foo()`来说, `foo`运行在全局环境,  调用者是window, 所以`this`指向全局环境. 不同环境不同作用域读取到的变量不同很正常, 所以两者的运行结果会不一样.\n\n​\t\t这里我们要谈到一个叫执行上下文的玩意儿. JavaScript中执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。对于每个执行上下文，都有三个重要属性：变量对象(Variable object，VO), 作用域链(Scope chain)和this.\n\n​\t\t一个函数定义之后可以在很多不同的地方被调用,  函数内部的this就在函数运行时指明了执行上下文, 也就是说明了**是哪个家伙 在哪里 调戏(调用)了我**. 这时候函数内部就能知道作用域是什么,有哪些变量是自己可以读取到的. 简单地说,要知道`this`指向什么, 我们只**需要搞清楚函数是在什么时候什么地方被谁如何被调用的**即可, 并不需要关注函数在哪里定义或声明.\n\n​\t\t`this`是使用[`call()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)方法调用函数时传递的第一个参数, 他可以在函数调用时修改, 在函数没有调用的时候, this的值是无法确定的.\n\n​\t\t接下来具体看看函数的调用, 以及不同情况下this指向哪里, 我们会借助call()方法来帮助理解.\n\n####\t(一)存粹的函数调用\n\n​\t\t第一种方法最常见, 例子如下:\n\n```javascript\nfunction test(name) {\n\tconsole.log(name);\n    console.log(this);\n}\ntest(\"Jerry\");\n```\n\n​\t\t这种方法我们平常使用的最多,但是这种函数调用方法只是一种简写,它完整的写法是下面这样的:\n\n```javascript\nfunction test(name) {\n    console.log(name);\n    console.log(this);\n}\ntest.call(undefined, \"Tom\");\t\n```\n\n​\t\t注意上面的`call`方法, **`call`方法接收的第一个参数就是this, 这里我们传了一个`undefined`**. 那么,依据定义,函数执行之后`console.log()`出来的会是`undefined`吗? 不是! (传入null或者undefined默认代表window对象)\n\n​\t\t所以在这里调用test函数的是window, `this`就是指向的window全局对象. 执行上下文也就是全局执行上下文了. \n\n####\t (二)作为对象方法的调用\n\n​\t\t函数还可以作为某个对象的方法调用,这时候一般`this`就指这个上级对象. (用call()方法可以例外哦)\n\n例子:\n\n```javascript\nconst obj = {\n    name: \"Jerry\",\n    greet: function() {\n        console.log(this.name);\n\t}\n}\nobj.greet();\t// 第一种调用方式\nobj.greet.call(obj) \t//第二种调用方式\n```\n\n​\t\t以上例子中的第一种调用方式实际上只是第二种方式的语法糖, 第二种才是完整的调用方法, **第二种方法厉害的地方就在于它可以手动指定this.**\n\n手动指定`this`的例子:\n\n```javascript\nconst obj = {\n    name: \"Jerry\",\n    greet: function() {\n\t\tconsole.log(this.name);\n    }\n}\nobj.greet.call({name: \"Trump\"}); \t// 打出来是 Trump\n```\n\n​\t\t上面例子`call`方法调用函数时传入的是一个对象, 这个对象就是手动指定的`this`, 因此`greet()`行数中`console.log(this.name)`打印出来的就是Trump了. 这个例子也验证了文章第一段所说的:\n\n> 我们只需要搞清楚函数是在什么时候什么地方如何被调用的即可, 并不需要关注函数在哪里定义或声明.\n\n\n\n####\t(三)构造函数中的this\n\n​\t\t构造函数中的`this`有一点特殊, 每个构造函数在new之后都会返回一个实例对象, `this`就指这个实例对象.\n\n例子:\n\n```javascript\nfunction Test() {\n\tthis.name = \"Tom\";\n}\nlet p = new Test();\nconsole.log(typeof p); \t// object\nconsole.log(p.name); \t// Tom\n```\n\n#### \t(四)window.setTimeout() 和window.setInterval()中函数的调用\n\n​\t\t他们两个函数中的`this`有些特殊,里面的`this`默认是`window`对象.\n\n​\t\t***简单总结一下：函数完整的调用方法是使用call方法，包括`test.call(context, name)`和`obj.greet.call(context,name)`，这里的context就是函数调用时的上下文，也就是`this`，只不过这个this是可以通过call方法来修改的；构造函数稍微特殊一点，它的`this`直接指向new之后返回的对象；`window.setTimeout()`和`window.setInterval()`默认的是`this`是window对象。***\n\n### 二、理解箭头函数中的this\n\n​\t\t**箭头函数表达式**的语法比[函数表达式](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/function)更简洁，并且没有自己的[this](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this)，[arguments](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments)，[super](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super)或 [new.target](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new.target)。这些函数表达式更适用于那些本来需要匿名函数的地方，并且它们不能用作构造函数。\n\n####\t(一)箭头函数默认不绑定this\n\n​\t\t在箭头函数出现之前，每个新定义的函数都有它自己的 `this`值（在构造函数的情况下是一个新对象，在严格模式的函数调用中为 undefined，如果该函数被作为“对象方法”调用则为基础对象等）。`this`被证明是令人厌烦的面向对象风格的编程。**箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承this。**\n\n不使用箭头函数的例子:\n\n```javascript\nconst obj = {\n    a: function() {\n        console.log(this);\n    }\n}\nobj.a();\t// 打印出的是obj对象\n```\n\n使用箭头函数的例子：\n\n```javascript\nconst obj ={\n    a: () => console.log(this)\n}\nobj.a();\t// 打印出来的是window\n```\n\n​\t\t上面这个例子中, 从作用域链上层(这里的上层也就是window)继承了this\n\n再来个例子:\n\n```javascript\nfunction test() {\n                const myObj = {\n                    name: \"hejian\",\n                    greeting: () => console.log(this)\n                }\n                return myObj.greeting();\n            }\ntest();\t// 打印出来的是window\n```\n\n​\t\t以上这个例子, 如果箭头函数像普通函数一样默认绑定`this`的话, 它的this应该指向`myObj`. 但是由于 **箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承`this`**,  所以这里就向作用域链的上级`test()`这一层作用域中查询,test()是个普通函数默认有this, 那么查询到这里就结束了. 那么这个this指向哪里呢? 答案就是指向window! 为了方便理解例子的最后一行可以用这种方式写: `test.call(undefined)`\n\n#### (二)不能用call方法修改箭头函数的this\n\n​\t\t由于 箭头函数没有自己的this指针，通过 [`call()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call) *或* [`apply()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply) 方法调用一个函数时，只能传递参数（不能绑定this），他们的第一个参数会被忽略。（这种现象对于bind方法同样成立）\n\n```javascript\nlet adder = {\n  base : 1,\n  add : function(a) {\n    var f = v => v + this.base;\n    return f(a);\n  },\n  addThruCall: function(a) {\n    var f = v => v + this.base;\n    var b = {\n      base : 2\n    };        \n    return f.call(b, a);\n  }\n};\n\nconsole.log(adder.add(1));         // 输出 2\nconsole.log(adder.addThruCall(1)); // 仍然输出 2（而不是3 ——译者注）\n```\n\n如上所示, 企图用call方法作用与箭头函数来手动指定this是行不通的.\n\n\n\n**参考:**\n\n1. [掘金 \\- JS中的箭头函数与this](https://juejin.im/post/5aa1eb056fb9a028b77a66fd)\n2. [JavaScript - all about this keyword](https://codeburst.io/all-about-this-and-new-keywords-in-javascript-38039f71780c)\n3. [MDN \\- 使用对象](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Functions)\n4. [MDN \\- 使用函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects)\n\n","slug":"JacaScript中的this","published":1,"updated":"2019-08-05T13:12:55.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyziybil000ankbnj60ml52x","content":"<h3 id=\"一、理解常规函数中的this\"><a href=\"#一、理解常规函数中的this\" class=\"headerlink\" title=\"一、理解常规函数中的this\"></a>一、理解常规函数中的this</h3><p>​        this指的是运行当前这段函数代码的对象,或者说指的是函数运行时所在的环境. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  foo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.bar) &#125;,</span><br><span class=\"line\">  bar: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = obj.foo;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.foo() <span class=\"comment\">// 1</span></span><br><span class=\"line\">foo() <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>​        对于<code>obj.foo()</code>来说, <code>foo</code>运行在<code>obj</code>环境, 调用者是<code>obj</code>, 所以this指向<code>obj</code>; 对于<code>foo()</code>来说, <code>foo</code>运行在全局环境,  调用者是window, 所以<code>this</code>指向全局环境. 不同环境不同作用域读取到的变量不同很正常, 所以两者的运行结果会不一样.</p>\n<p>​        这里我们要谈到一个叫执行上下文的玩意儿. JavaScript中执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。对于每个执行上下文，都有三个重要属性：变量对象(Variable object，VO), 作用域链(Scope chain)和this.</p>\n<p>​        一个函数定义之后可以在很多不同的地方被调用,  函数内部的this就在函数运行时指明了执行上下文, 也就是说明了<strong>是哪个家伙 在哪里 调戏(调用)了我</strong>. 这时候函数内部就能知道作用域是什么,有哪些变量是自己可以读取到的. 简单地说,要知道<code>this</code>指向什么, 我们只<strong>需要搞清楚函数是在什么时候什么地方被谁如何被调用的</strong>即可, 并不需要关注函数在哪里定义或声明.</p>\n<p>​        <code>this</code>是使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a>方法调用函数时传递的第一个参数, 他可以在函数调用时修改, 在函数没有调用的时候, this的值是无法确定的.</p>\n<p>​        接下来具体看看函数的调用, 以及不同情况下this指向哪里, 我们会借助call()方法来帮助理解.</p>\n<h4 id=\"一-存粹的函数调用\"><a href=\"#一-存粹的函数调用\" class=\"headerlink\" title=\"(一)存粹的函数调用\"></a>(一)存粹的函数调用</h4><p>​        第一种方法最常见, 例子如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">true<span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"string\">\"Jerry\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>​        这种方法我们平常使用的最多,但是这种函数调用方法只是一种简写,它完整的写法是下面这样的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test.call(<span class=\"literal\">undefined</span>, <span class=\"string\">\"Tom\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>​        注意上面的<code>call</code>方法, <strong><code>call</code>方法接收的第一个参数就是this, 这里我们传了一个<code>undefined</code></strong>. 那么,依据定义,函数执行之后<code>console.log()</code>出来的会是<code>undefined</code>吗? 不是! (传入null或者undefined默认代表window对象)</p>\n<p>​        所以在这里调用test函数的是window, <code>this</code>就是指向的window全局对象. 执行上下文也就是全局执行上下文了. </p>\n<h4 id=\"二-作为对象方法的调用\"><a href=\"#二-作为对象方法的调用\" class=\"headerlink\" title=\"(二)作为对象方法的调用\"></a>(二)作为对象方法的调用</h4><p>​        函数还可以作为某个对象的方法调用,这时候一般<code>this</code>就指这个上级对象. (用call()方法可以例外哦)</p>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"Jerry\"</span>,</span><br><span class=\"line\">    greet: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">true&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.greet();\t<span class=\"comment\">// 第一种调用方式</span></span><br><span class=\"line\">obj.greet.call(obj) \t<span class=\"comment\">//第二种调用方式</span></span><br></pre></td></tr></table></figure>\n\n<p>​        以上例子中的第一种调用方式实际上只是第二种方式的语法糖, 第二种才是完整的调用方法, <strong>第二种方法厉害的地方就在于它可以手动指定this.</strong></p>\n<p>手动指定<code>this</code>的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"Jerry\"</span>,</span><br><span class=\"line\">    greet: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">truetrue<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.greet.call(&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Trump\"</span>&#125;); \t<span class=\"comment\">// 打出来是 Trump</span></span><br></pre></td></tr></table></figure>\n\n<p>​        上面例子<code>call</code>方法调用函数时传入的是一个对象, 这个对象就是手动指定的<code>this</code>, 因此<code>greet()</code>行数中<code>console.log(this.name)</code>打印出来的就是Trump了. 这个例子也验证了文章第一段所说的:</p>\n<blockquote>\n<p>我们只需要搞清楚函数是在什么时候什么地方如何被调用的即可, 并不需要关注函数在哪里定义或声明.</p>\n</blockquote>\n<h4 id=\"三-构造函数中的this\"><a href=\"#三-构造函数中的this\" class=\"headerlink\" title=\"(三)构造函数中的this\"></a>(三)构造函数中的this</h4><p>​        构造函数中的<code>this</code>有一点特殊, 每个构造函数在new之后都会返回一个实例对象, <code>this</code>就指这个实例对象.</p>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">true<span class=\"keyword\">this</span>.name = <span class=\"string\">\"Tom\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> p); \t<span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.name); \t<span class=\"comment\">// Tom</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四-window-setTimeout-和window-setInterval-中函数的调用\"><a href=\"#四-window-setTimeout-和window-setInterval-中函数的调用\" class=\"headerlink\" title=\"(四)window.setTimeout() 和window.setInterval()中函数的调用\"></a>(四)window.setTimeout() 和window.setInterval()中函数的调用</h4><p>​        他们两个函数中的<code>this</code>有些特殊,里面的<code>this</code>默认是<code>window</code>对象.</p>\n<p>​        <strong><em>简单总结一下：函数完整的调用方法是使用call方法，包括<code>test.call(context, name)</code>和<code>obj.greet.call(context,name)</code>，这里的context就是函数调用时的上下文，也就是<code>this</code>，只不过这个this是可以通过call方法来修改的；构造函数稍微特殊一点，它的<code>this</code>直接指向new之后返回的对象；<code>window.setTimeout()</code>和<code>window.setInterval()</code>默认的是<code>this</code>是window对象。</em></strong></p>\n<h3 id=\"二、理解箭头函数中的this\"><a href=\"#二、理解箭头函数中的this\" class=\"headerlink\" title=\"二、理解箭头函数中的this\"></a>二、理解箭头函数中的this</h3><p>​        <strong>箭头函数表达式</strong>的语法比<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/function\" target=\"_blank\" rel=\"noopener\">函数表达式</a>更简洁，并且没有自己的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\">this</a>，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments\" target=\"_blank\" rel=\"noopener\">arguments</a>，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super\" target=\"_blank\" rel=\"noopener\">super</a>或 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new.target\" target=\"_blank\" rel=\"noopener\">new.target</a>。这些函数表达式更适用于那些本来需要匿名函数的地方，并且它们不能用作构造函数。</p>\n<h4 id=\"一-箭头函数默认不绑定this\"><a href=\"#一-箭头函数默认不绑定this\" class=\"headerlink\" title=\"(一)箭头函数默认不绑定this\"></a>(一)箭头函数默认不绑定this</h4><p>​        在箭头函数出现之前，每个新定义的函数都有它自己的 <code>this</code>值（在构造函数的情况下是一个新对象，在严格模式的函数调用中为 undefined，如果该函数被作为“对象方法”调用则为基础对象等）。<code>this</code>被证明是令人厌烦的面向对象风格的编程。<strong>箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承this。</strong></p>\n<p>不使用箭头函数的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    a: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.a();\t<span class=\"comment\">// 打印出的是obj对象</span></span><br></pre></td></tr></table></figure>\n\n<p>使用箭头函数的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj =&#123;</span><br><span class=\"line\">    a: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.a();\t<span class=\"comment\">// 打印出来的是window</span></span><br></pre></td></tr></table></figure>\n\n<p>​        上面这个例子中, 从作用域链上层(这里的上层也就是window)继承了this</p>\n<p>再来个例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> myObj = &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">\"hejian\"</span>,</span><br><span class=\"line\">                    greeting: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> myObj.greeting();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">test();\t<span class=\"comment\">// 打印出来的是window</span></span><br></pre></td></tr></table></figure>\n\n<p>​        以上这个例子, 如果箭头函数像普通函数一样默认绑定<code>this</code>的话, 它的this应该指向<code>myObj</code>. 但是由于 <strong>箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承<code>this</code></strong>,  所以这里就向作用域链的上级<code>test()</code>这一层作用域中查询,test()是个普通函数默认有this, 那么查询到这里就结束了. 那么这个this指向哪里呢? 答案就是指向window! 为了方便理解例子的最后一行可以用这种方式写: <code>test.call(undefined)</code></p>\n<h4 id=\"二-不能用call方法修改箭头函数的this\"><a href=\"#二-不能用call方法修改箭头函数的this\" class=\"headerlink\" title=\"(二)不能用call方法修改箭头函数的this\"></a>(二)不能用call方法修改箭头函数的this</h4><p>​        由于 箭头函数没有自己的this指针，通过 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a> <em>或</em> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>apply()</code></a> 方法调用一个函数时，只能传递参数（不能绑定this），他们的第一个参数会被忽略。（这种现象对于bind方法同样成立）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> adder = &#123;</span><br><span class=\"line\">  base : <span class=\"number\">1</span>,</span><br><span class=\"line\">  add : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v + <span class=\"keyword\">this</span>.base;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(a);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  addThruCall: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v + <span class=\"keyword\">this</span>.base;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = &#123;</span><br><span class=\"line\">      base : <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;;        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> f.call(b, a);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(adder.add(<span class=\"number\">1</span>));         <span class=\"comment\">// 输出 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(adder.addThruCall(<span class=\"number\">1</span>)); <span class=\"comment\">// 仍然输出 2（而不是3 ——译者注）</span></span><br></pre></td></tr></table></figure>\n\n<p>如上所示, 企图用call方法作用与箭头函数来手动指定this是行不通的.</p>\n<p><strong>参考:</strong></p>\n<ol>\n<li><a href=\"https://juejin.im/post/5aa1eb056fb9a028b77a66fd\" target=\"_blank\" rel=\"noopener\">掘金 - JS中的箭头函数与this</a></li>\n<li><a href=\"https://codeburst.io/all-about-this-and-new-keywords-in-javascript-38039f71780c\" target=\"_blank\" rel=\"noopener\">JavaScript - all about this keyword</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Functions\" target=\"_blank\" rel=\"noopener\">MDN - 使用对象</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects\" target=\"_blank\" rel=\"noopener\">MDN - 使用函数</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、理解常规函数中的this\"><a href=\"#一、理解常规函数中的this\" class=\"headerlink\" title=\"一、理解常规函数中的this\"></a>一、理解常规函数中的this</h3><p>​        this指的是运行当前这段函数代码的对象,或者说指的是函数运行时所在的环境. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  foo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.bar) &#125;,</span><br><span class=\"line\">  bar: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = obj.foo;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.foo() <span class=\"comment\">// 1</span></span><br><span class=\"line\">foo() <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>​        对于<code>obj.foo()</code>来说, <code>foo</code>运行在<code>obj</code>环境, 调用者是<code>obj</code>, 所以this指向<code>obj</code>; 对于<code>foo()</code>来说, <code>foo</code>运行在全局环境,  调用者是window, 所以<code>this</code>指向全局环境. 不同环境不同作用域读取到的变量不同很正常, 所以两者的运行结果会不一样.</p>\n<p>​        这里我们要谈到一个叫执行上下文的玩意儿. JavaScript中执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。对于每个执行上下文，都有三个重要属性：变量对象(Variable object，VO), 作用域链(Scope chain)和this.</p>\n<p>​        一个函数定义之后可以在很多不同的地方被调用,  函数内部的this就在函数运行时指明了执行上下文, 也就是说明了<strong>是哪个家伙 在哪里 调戏(调用)了我</strong>. 这时候函数内部就能知道作用域是什么,有哪些变量是自己可以读取到的. 简单地说,要知道<code>this</code>指向什么, 我们只<strong>需要搞清楚函数是在什么时候什么地方被谁如何被调用的</strong>即可, 并不需要关注函数在哪里定义或声明.</p>\n<p>​        <code>this</code>是使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a>方法调用函数时传递的第一个参数, 他可以在函数调用时修改, 在函数没有调用的时候, this的值是无法确定的.</p>\n<p>​        接下来具体看看函数的调用, 以及不同情况下this指向哪里, 我们会借助call()方法来帮助理解.</p>\n<h4 id=\"一-存粹的函数调用\"><a href=\"#一-存粹的函数调用\" class=\"headerlink\" title=\"(一)存粹的函数调用\"></a>(一)存粹的函数调用</h4><p>​        第一种方法最常见, 例子如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">true<span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"string\">\"Jerry\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>​        这种方法我们平常使用的最多,但是这种函数调用方法只是一种简写,它完整的写法是下面这样的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test.call(<span class=\"literal\">undefined</span>, <span class=\"string\">\"Tom\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>​        注意上面的<code>call</code>方法, <strong><code>call</code>方法接收的第一个参数就是this, 这里我们传了一个<code>undefined</code></strong>. 那么,依据定义,函数执行之后<code>console.log()</code>出来的会是<code>undefined</code>吗? 不是! (传入null或者undefined默认代表window对象)</p>\n<p>​        所以在这里调用test函数的是window, <code>this</code>就是指向的window全局对象. 执行上下文也就是全局执行上下文了. </p>\n<h4 id=\"二-作为对象方法的调用\"><a href=\"#二-作为对象方法的调用\" class=\"headerlink\" title=\"(二)作为对象方法的调用\"></a>(二)作为对象方法的调用</h4><p>​        函数还可以作为某个对象的方法调用,这时候一般<code>this</code>就指这个上级对象. (用call()方法可以例外哦)</p>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"Jerry\"</span>,</span><br><span class=\"line\">    greet: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">true&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.greet();\t<span class=\"comment\">// 第一种调用方式</span></span><br><span class=\"line\">obj.greet.call(obj) \t<span class=\"comment\">//第二种调用方式</span></span><br></pre></td></tr></table></figure>\n\n<p>​        以上例子中的第一种调用方式实际上只是第二种方式的语法糖, 第二种才是完整的调用方法, <strong>第二种方法厉害的地方就在于它可以手动指定this.</strong></p>\n<p>手动指定<code>this</code>的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"Jerry\"</span>,</span><br><span class=\"line\">    greet: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">truetrue<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.greet.call(&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"Trump\"</span>&#125;); \t<span class=\"comment\">// 打出来是 Trump</span></span><br></pre></td></tr></table></figure>\n\n<p>​        上面例子<code>call</code>方法调用函数时传入的是一个对象, 这个对象就是手动指定的<code>this</code>, 因此<code>greet()</code>行数中<code>console.log(this.name)</code>打印出来的就是Trump了. 这个例子也验证了文章第一段所说的:</p>\n<blockquote>\n<p>我们只需要搞清楚函数是在什么时候什么地方如何被调用的即可, 并不需要关注函数在哪里定义或声明.</p>\n</blockquote>\n<h4 id=\"三-构造函数中的this\"><a href=\"#三-构造函数中的this\" class=\"headerlink\" title=\"(三)构造函数中的this\"></a>(三)构造函数中的this</h4><p>​        构造函数中的<code>this</code>有一点特殊, 每个构造函数在new之后都会返回一个实例对象, <code>this</code>就指这个实例对象.</p>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">true<span class=\"keyword\">this</span>.name = <span class=\"string\">\"Tom\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> p); \t<span class=\"comment\">// object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.name); \t<span class=\"comment\">// Tom</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四-window-setTimeout-和window-setInterval-中函数的调用\"><a href=\"#四-window-setTimeout-和window-setInterval-中函数的调用\" class=\"headerlink\" title=\"(四)window.setTimeout() 和window.setInterval()中函数的调用\"></a>(四)window.setTimeout() 和window.setInterval()中函数的调用</h4><p>​        他们两个函数中的<code>this</code>有些特殊,里面的<code>this</code>默认是<code>window</code>对象.</p>\n<p>​        <strong><em>简单总结一下：函数完整的调用方法是使用call方法，包括<code>test.call(context, name)</code>和<code>obj.greet.call(context,name)</code>，这里的context就是函数调用时的上下文，也就是<code>this</code>，只不过这个this是可以通过call方法来修改的；构造函数稍微特殊一点，它的<code>this</code>直接指向new之后返回的对象；<code>window.setTimeout()</code>和<code>window.setInterval()</code>默认的是<code>this</code>是window对象。</em></strong></p>\n<h3 id=\"二、理解箭头函数中的this\"><a href=\"#二、理解箭头函数中的this\" class=\"headerlink\" title=\"二、理解箭头函数中的this\"></a>二、理解箭头函数中的this</h3><p>​        <strong>箭头函数表达式</strong>的语法比<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/function\" target=\"_blank\" rel=\"noopener\">函数表达式</a>更简洁，并且没有自己的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\">this</a>，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments\" target=\"_blank\" rel=\"noopener\">arguments</a>，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super\" target=\"_blank\" rel=\"noopener\">super</a>或 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new.target\" target=\"_blank\" rel=\"noopener\">new.target</a>。这些函数表达式更适用于那些本来需要匿名函数的地方，并且它们不能用作构造函数。</p>\n<h4 id=\"一-箭头函数默认不绑定this\"><a href=\"#一-箭头函数默认不绑定this\" class=\"headerlink\" title=\"(一)箭头函数默认不绑定this\"></a>(一)箭头函数默认不绑定this</h4><p>​        在箭头函数出现之前，每个新定义的函数都有它自己的 <code>this</code>值（在构造函数的情况下是一个新对象，在严格模式的函数调用中为 undefined，如果该函数被作为“对象方法”调用则为基础对象等）。<code>this</code>被证明是令人厌烦的面向对象风格的编程。<strong>箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承this。</strong></p>\n<p>不使用箭头函数的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    a: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.a();\t<span class=\"comment\">// 打印出的是obj对象</span></span><br></pre></td></tr></table></figure>\n\n<p>使用箭头函数的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj =&#123;</span><br><span class=\"line\">    a: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.a();\t<span class=\"comment\">// 打印出来的是window</span></span><br></pre></td></tr></table></figure>\n\n<p>​        上面这个例子中, 从作用域链上层(这里的上层也就是window)继承了this</p>\n<p>再来个例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> myObj = &#123;</span><br><span class=\"line\">                    name: <span class=\"string\">\"hejian\"</span>,</span><br><span class=\"line\">                    greeting: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> myObj.greeting();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">test();\t<span class=\"comment\">// 打印出来的是window</span></span><br></pre></td></tr></table></figure>\n\n<p>​        以上这个例子, 如果箭头函数像普通函数一样默认绑定<code>this</code>的话, 它的this应该指向<code>myObj</code>. 但是由于 <strong>箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承<code>this</code></strong>,  所以这里就向作用域链的上级<code>test()</code>这一层作用域中查询,test()是个普通函数默认有this, 那么查询到这里就结束了. 那么这个this指向哪里呢? 答案就是指向window! 为了方便理解例子的最后一行可以用这种方式写: <code>test.call(undefined)</code></p>\n<h4 id=\"二-不能用call方法修改箭头函数的this\"><a href=\"#二-不能用call方法修改箭头函数的this\" class=\"headerlink\" title=\"(二)不能用call方法修改箭头函数的this\"></a>(二)不能用call方法修改箭头函数的this</h4><p>​        由于 箭头函数没有自己的this指针，通过 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\"><code>call()</code></a> <em>或</em> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\"><code>apply()</code></a> 方法调用一个函数时，只能传递参数（不能绑定this），他们的第一个参数会被忽略。（这种现象对于bind方法同样成立）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> adder = &#123;</span><br><span class=\"line\">  base : <span class=\"number\">1</span>,</span><br><span class=\"line\">  add : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v + <span class=\"keyword\">this</span>.base;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(a);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  addThruCall: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v + <span class=\"keyword\">this</span>.base;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = &#123;</span><br><span class=\"line\">      base : <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;;        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> f.call(b, a);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(adder.add(<span class=\"number\">1</span>));         <span class=\"comment\">// 输出 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(adder.addThruCall(<span class=\"number\">1</span>)); <span class=\"comment\">// 仍然输出 2（而不是3 ——译者注）</span></span><br></pre></td></tr></table></figure>\n\n<p>如上所示, 企图用call方法作用与箭头函数来手动指定this是行不通的.</p>\n<p><strong>参考:</strong></p>\n<ol>\n<li><a href=\"https://juejin.im/post/5aa1eb056fb9a028b77a66fd\" target=\"_blank\" rel=\"noopener\">掘金 - JS中的箭头函数与this</a></li>\n<li><a href=\"https://codeburst.io/all-about-this-and-new-keywords-in-javascript-38039f71780c\" target=\"_blank\" rel=\"noopener\">JavaScript - all about this keyword</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Functions\" target=\"_blank\" rel=\"noopener\">MDN - 使用对象</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects\" target=\"_blank\" rel=\"noopener\">MDN - 使用函数</a></li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjyziybgk0000nkbnpp2fnp59","category_id":"cjyziybgt0003nkbncab1aeun","_id":"cjyziybgx0007nkbnqg41jptt"},{"post_id":"cjyziybil000ankbnj60ml52x","category_id":"cjyziybgt0003nkbncab1aeun","_id":"cjyziybio000cnkbnmp7osxon"}],"PostTag":[{"post_id":"cjyziybgk0000nkbnpp2fnp59","tag_id":"cjyziybgu0004nkbnqaa4wcbn","_id":"cjyziybgy0008nkbnldcytbx0"},{"post_id":"cjyziybgk0000nkbnpp2fnp59","tag_id":"cjyziybgx0006nkbnkp6ebjl9","_id":"cjyziybgy0009nkbnxn0f1hwy"},{"post_id":"cjyziybil000ankbnj60ml52x","tag_id":"cjyziybgx0006nkbnkp6ebjl9","_id":"cjyziybin000bnkbna9ftbkom"}],"Tag":[{"name":"html","_id":"cjyziybgu0004nkbnqaa4wcbn"},{"name":"js","_id":"cjyziybgx0006nkbnkp6ebjl9"}]}}